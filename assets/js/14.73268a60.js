(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{378:function(t,e,n){"use strict";n.r(e);var a=n(44),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"面向对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),n("h3",{attrs:{id:"写在前面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[t._v("#")]),t._v(" 写在前面")]),t._v(" "),n("p",[t._v("在复习"),n("code",[t._v("面向对象cpp")]),t._v("的考试，顺便记下一些笔记，更深入学习C++")]),t._v(" "),n("h3",{attrs:{id:"对象和类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象和类"}},[t._v("#")]),t._v(" 对象和类")]),t._v(" "),n("p",[t._v("对象和类重要的内容往往包含于：")]),t._v(" "),n("ul",[n("li",[t._v("面向过程和面向对象编程")]),t._v(" "),n("li",[t._v("类的定义和实现")]),t._v(" "),n("li",[t._v("公有类和私有类")]),t._v(" "),n("li",[t._v("类的数据成员")]),t._v(" "),n("li",[t._v("折构函数和析构函数")]),t._v(" "),n("li",[t._v("this指针")])]),t._v(" "),n("h4",{attrs:{id:"面向过程和面向对象编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面向过程和面向对象编程"}},[t._v("#")]),t._v(" 面向过程和面向对象编程")]),t._v(" "),n("p",[t._v("采用OPP的方法，应该首先考虑的是"),n("code",[t._v("对象")]),t._v("的概念---描述对象所需的数据以及描述用户与数据交互所需要的操作。记录一下编程过程当中遇到的面向对象的优点：")]),t._v(" "),n("p",[t._v("在使用"),n("code",[t._v("python")]),t._v("编写接口程序时，打算封装教务系统。一个"),n("code",[t._v("User")]),t._v("包含了``username"),n("code",[t._v("、")]),t._v("password`以及生日、GPA等等属性。建立一个user的类，类里面含有该有的数据成员，这样操作起来会使代码简化很多，更便于维护。")]),t._v(" "),n("blockquote",[n("p",[t._v("C++是既支持面向对象的程序设计又支持面向过程的程序设计的混合型语言")])]),t._v(" "),n("h4",{attrs:{id:"类的定义和实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的定义和实现"}},[t._v("#")]),t._v(" 类的定义和实现")]),t._v(" "),n("p",[t._v("类的基本声明")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class className\n{\n    private:\n        data member declaerations\n    public:\n        member function prototypes\n}\n")])])]),n("p",[t._v("公有部分的内容构成设计的抽象部分---共有接口")]),t._v(" "),n("p",[t._v("将数据封装到私有部分可以保护数据的完整性，这被称为数据隐藏")]),t._v(" "),n("h4",{attrs:{id:"构造函数和析构函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数和析构函数"}},[t._v("#")]),t._v(" 构造函数和析构函数")]),t._v(" "),n("p",[t._v("C++ Primer Plus关于构造函数给了一个很好的的解释：对于一个类")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('Stock hot = {"Suike\'s Auto", 200, 50.15} //NO! compile error\n')])])]),n("blockquote",[n("p",[t._v("如果使数据成员成为公有，而不是私有，则违背了类的重要初衷：数据隐藏")])]),t._v(" "),n("p",[t._v("在这里尝试使用"),n("code",[t._v("Struct")]),t._v("关键字")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Struct strName{\n    int m_s;\n    int m_q;\n}\nStrname M = {1,2}//True\n\nClass className{\n    int m_s;\n    int m_q;\n}\nclassName M = {1,2}//False\n")])])]),n("p",[t._v("可知在Struct中数据成员默认的访问方式为Public而Class相反。")]),t._v(" "),n("p",[t._v("因此在隐式转换的时候会受到影响。")]),t._v(" "),n("p",[t._v("因此为了解决实现该功能，可以采用函数构造")]),t._v(" "),n("h5",{attrs:{id:"构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//constructor prototype with some default arguments\n// 默认构造\nStock{const string & co, long n = 0,double pr = 0.0}\n")])])]),n("p",[t._v("分为")]),t._v(" "),n("ul",[n("li",[t._v("默认构造函数")]),t._v(" "),n("li",[t._v("有参构造函数")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("struct S {\n    int n = 42;   // 默认成员初始化器\n    S() : n(7) {} // 将设置 n 为 7，而非 42\n};\n")])])]),n("p",[t._v("中途发现了的一些有趣的东西*(C++11)*")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//列表初始化\nstruct S {\n\tstruct {\n\t\tint x, y;\n\t}\n\tz[2];\n};\n\nint main() {\n\tint d[2] = { 1, 2, 3 };   // C2078 \n\tint e[2] = { 1, 2 };      // OK\n\n\tchar a[] = { "a", "b" };  // C2078\n\tchar* b[] = { "a", "b" }; // OK\n\tchar c[] = { \'a\', \'b\' };  // OK\n\n\tS s1{ 1, 2, 3, 4 };       // OK\n\tS s2{ {1, 2}, {3, 4} };   // C2078 使用参数过多\n\tS s3{ {1, 2, 3, 4} };     // OK\n\tS s4{ {{1, 2}, {3, 4}} }; // OK\n}\n')])])]),n("h5",{attrs:{id:"析构函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#析构函数"}},[t._v("#")]),t._v(" 析构函数")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("~className()\n{\n}\n")])])]),n("p",[t._v("有关"),n("a",{attrs:{href:"#%E7%BB%A7%E6%89%BF"}},[t._v("继承")]),t._v("的章节再写")]),t._v(" "),n("h4",{attrs:{id:"深拷贝与浅拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝与浅拷贝"}},[t._v("#")]),t._v(" 深拷贝与浅拷贝")]),t._v(" "),n("p",[t._v("摘选自")]),t._v(" "),n("p",[t._v("https://github.com/Blitzer207/C-Resource/blob/master/")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Person {\npublic:\n\t//无参（默认）构造函数\n\tPerson() {\n\t\tcout << "无参构造函数!" << endl;\n\t}\n\t//有参构造函数\n\tPerson(int age ,int height) {\n\t\t\n\t\tcout << "有参构造函数!" << endl;\n\n\t\tm_age = age;\n\t\tm_height = new int(height);\n\t\t\n\t}\n\t//拷贝构造函数  \n\tPerson(const Person& p) {\n\t\tcout << "拷贝构造函数!" << endl;\n\t\t//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题\n\t\tm_age = p.m_age;\n\t\tm_height = new int(*p.m_height);\n\t}\n\t//析构函数\n\t~Person() {\n\t\tcout << "析构函数!" << endl;\n\t\tif (m_height != NULL)\n\t\t{\n\t\t\tdelete m_height;\n\t\t}\n\t}\npublic:\n\tint m_age;\n\tint* m_height;\n};\n\nvoid test01()\n{\n\tPerson p1(18, 180);\n\n\tPerson p2(p1);\n\n\tcout << "p1的年龄： " << p1.m_age << " 身高： " << *p1.m_height << endl;\n\n\tcout << "p2的年龄： " << p2.m_age << " 身高： " << *p2.m_height << endl;\n}\n\nint main() {\n\n\ttest01();\n\n\tsystem("pause");\n\n\treturn 0;\n}\n')])])]),n("h4",{attrs:{id:"this关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this关键字"}},[t._v("#")]),t._v(" this关键字")]),t._v(" "),n("p",[n("code",[t._v("this")]),t._v("关键字出现于许多面向对象的语言，再c++中，"),n("code",[t._v("this")]),t._v("出现的语境有")]),t._v(" "),n("ul",[n("li",[t._v("非静态成员函数内， 包括成员初始化器列表")]),t._v(" "),n("li",[t._v("在非静态成员函数的"),n("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/language/function",target:"_blank",rel:"noopener noreferrer"}},[t._v("声明"),n("OutboundLink")],1),t._v("中，（可选的）cv 限定符序列之后的任何位置，包括"),n("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/language/except_spec",target:"_blank",rel:"noopener noreferrer"}},[t._v("动态异常说明"),n("OutboundLink")],1),t._v("(弃用)、"),n("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/language/noexcept_spec",target:"_blank",rel:"noopener noreferrer"}},[t._v("noexcept 说明"),n("OutboundLink")],1),t._v("(C++11)以及尾随返回类型(C++11 起)")]),t._v(" "),n("li",[t._v("在"),n("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/language/data_members#.E6.88.90.E5.91.98.E5.88.9D.E5.A7.8B.E5.8C.96",target:"_blank",rel:"noopener noreferrer"}},[t._v("默认成员初始化器"),n("OutboundLink")],1),t._v("中 (C++11 起)")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//cppreference\nclass T\n{\n    int x;\n \n    void foo()\n    {\n        x = 6;       // 等同于 this->x = 6;\n        this->x = 5; // 显式使用 this->\n    }\n \n    void foo() const\n    {\n//        x = 7; // 错误：*this 是常量\n    }\n \n    void foo(int x) // 形参 x 遮蔽拥有相同名字的成员\n    {\n        this->x = x; // 无限定的 x 代表形参\n                     // 需要用‘this->’消歧义\n    }\n \n    int y;\n    T(int x) : x(x), // 用形参 x 初始化成员 x\n               y(this->x) // 用成员 x 初始化成员 y\n    {}\n \n    T& operator= ( const T& b )\n    {\n        x = b.x;\n        return *this; // 许多重载运算符都返回 *this\n    }\n};\n \nclass Outer {\n    int a[sizeof(*this)]; // 错误：不在成员函数中\n    unsigned int sz = sizeof(*this); // OK：在默认成员初始化器中\n    void f() {\n        int b[sizeof(*this)]; // OK\n        struct Inner {\n            int c[sizeof(*this)]; // 错误：不在 Inner 的成员函数中\n        };\n    }\n}\n")])])]),n("h3",{attrs:{id:"运算符重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载"}},[t._v("#")]),t._v(" 运算符重载")]),t._v(" "),n("p",[n("code",[t._v("c++")]),t._v("不像"),n("code",[t._v("python")]),t._v("或者"),n("code",[t._v("javasript")]),t._v("可以对对象直接赋值，在"),n("code",[t._v("c++")]),t._v("里面，使用对象赋值的"),n("code",[t._v("=")]),t._v("号等，需要进行运算符重载等。当然，并不是所有的运算符都可以被重载。例如，"),n("code",[t._v(".")]),t._v(" "),n("code",[t._v("::")]),t._v(" "),n("code",[t._v("sizeof")]),t._v(" "),n("code",[t._v("typeid")]),t._v("，还有唯一的一个三元运算符 "),n("code",[t._v("?:")]),t._v("，都是不可以被重载的。")]),t._v(" "),n("p",[t._v("可以被重载的运算符如下：")]),t._v(" "),n("ul",[n("li",[t._v("二元算术运算符 "),n("code",[t._v("+")]),t._v(" "),n("code",[t._v("-")]),t._v(" "),n("code",[t._v("*")]),t._v(" "),n("code",[t._v("/")]),t._v(" "),n("code",[t._v("%")]),t._v(" "),n("code",[t._v("+=")]),t._v(" "),n("code",[t._v("-=")]),t._v(" "),n("code",[t._v("*=")]),t._v(" "),n("code",[t._v("/=")]),t._v(" "),n("code",[t._v("%=")]),t._v("；一元前缀运算符 "),n("code",[t._v("+")]),t._v(" "),n("code",[t._v("-")]),t._v("；一元前缀后缀运算符 "),n("code",[t._v("++")]),t._v(" "),n("code",[t._v("--")]),t._v("。")]),t._v(" "),n("li",[t._v("二元位操作运算符 "),n("code",[t._v("&")]),t._v(" "),n("code",[t._v("|")]),t._v(" "),n("code",[t._v("^")]),t._v(" "),n("code",[t._v("<<")]),t._v(" "),n("code",[t._v(">>")]),t._v(" "),n("code",[t._v("&=")]),t._v(" "),n("code",[t._v("|=")]),t._v(" "),n("code",[t._v("^=")]),t._v(" "),n("code",[t._v("<<=")]),t._v(" "),n("code",[t._v(">>=")]),t._v("；一元前缀位操作运算符 "),n("code",[t._v("~")]),t._v("。")]),t._v(" "),n("li",[t._v("二元布尔操作运算符 "),n("code",[t._v("==")]),t._v(" "),n("code",[t._v("!=")]),t._v(" "),n("code",[t._v("<")]),t._v(" "),n("code",[t._v(">")]),t._v(" "),n("code",[t._v("<=")]),t._v(" "),n("code",[t._v(">=")]),t._v(" "),n("code",[t._v("||")]),t._v(" "),n("code",[t._v("&&")]),t._v("；一元前缀布尔操作符 "),n("code",[t._v("!")]),t._v("。")]),t._v(" "),n("li",[t._v("内存管理运算符 "),n("code",[t._v("new")]),t._v(" "),n("code",[t._v("new[]")]),t._v(" "),n("code",[t._v("delete")]),t._v(" "),n("code",[t._v("delete[]")]),t._v("。")]),t._v(" "),n("li",[t._v("隐式转换运算符。")]),t._v(" "),n("li",[t._v("其它二元运算符 "),n("code",[t._v("=")]),t._v(" "),n("code",[t._v("[]")]),t._v(" "),n("code",[t._v("->")]),t._v(" "),n("code",[t._v("->*")]),t._v(" "),n("code",[t._v(",")]),t._v("；其它一元前缀运算符 "),n("code",[t._v("*")]),t._v(" "),n("code",[t._v("&")]),t._v("；还有 n 元的函数调用运算符 "),n("code",[t._v("()")]),t._v("。")])]),t._v(" "),n("p",[t._v("运算符重载是一种特殊的函数。和其它函数一样，运算符重载既可作为成员函数，也可作为非成员函数。")]),t._v(" "),n("h4",{attrs:{id:"成员函数与非成员函数的选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#成员函数与非成员函数的选择"}},[t._v("#")]),t._v(" 成员函数与非成员函数的选择")]),t._v(" "),n("p",[t._v("赋值运算符"),n("code",[t._v("=")]),t._v("、数组下标运算符 "),n("code",[t._v("[]")]),t._v("、成员访问符"),n("code",[t._v("->")]),t._v(" 和 函数调用运算符"),n("code",[t._v("()")]),t._v("，只能作为成员函数，因为"),n("code",[t._v("C++")]),t._v("语法就是这么要求的。")]),t._v(" "),n("p",[t._v("其它的运算符可以定义为成员函数，也可以定义为非成员函数。但是有一些你不得不定义成非成员函数，因为它们的左操作数是不可修改的。比如输入输出运算符（"),n("code",[t._v("<<")]),t._v(" 和 "),n("code",[t._v(">>")]),t._v("），它们的左操作数是标准流对象（stream），我们无法对其进行修改。")]),t._v(" "),n("h4",{attrs:{id:"赋值运算符重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符重载"}},[t._v("#")]),t._v(" 赋值运算符重载")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("X& X::operator=(X rhs)\n{\n  swap(rhs);\n  return *this;\n}//成员函数\n")])])]),n("h4",{attrs:{id:"自增运算符重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自增运算符重载"}},[t._v("#")]),t._v(" 自增运算符重载")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("struct X\n{\n    // 前缀自增\n    X& operator++()\n    {\n        // 实际上的自增在此进行\n        return *this; // 以引用返回新值\n    }\n \n    // 后缀自增\n    X operator++(int)\n    {\n        X old = *this; // 复制旧值\n        operator++();  // 前缀自增\n        return old;    // 返回旧值\n    }\n \n    // 前缀自减\n    X& operator--()\n    {\n        // 实际上的自减在此进行\n        return *this; // 以引用返回新值\n    }\n \n    // 后缀自减\n    X operator--(int)\n    {\n        X old = *this; // 复制旧值\n        operator--();  // 前缀自减\n        return old;    // 返回旧值\n    }\n};}\n};\n")])])]),n("h4",{attrs:{id:"输入输出运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#输入输出运算符"}},[t._v("#")]),t._v(" 输入输出运算符")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class T\n{\n    ...\n    \n    friend std::ostream &operator<<(std::ostream &os, const T &obj)\n    {\n        // write obj to stream\n\n        return os;\n    }\n\n    friend std::istream &operator>>(std::istream &is, T &obj)\n    {\n        // read obj from stream\n\n        if (/* no valid object of T found in stream */)\n            is >> T.par;\n\n        return is;\n    }\n};//非成员函数\n")])])]),n("h3",{attrs:{id:"继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),n("blockquote",[n("p",[t._v("**继承（Inheri"),n("a",{attrs:{href:"http://c.biancheng.net/ref/tan.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("tan"),n("OutboundLink")],1),t._v("ce）**可以理解为一个类从另一个类获取成员变量和成员函数的过程。例如类 B 继承于类 A，那么 B 就拥有 A 的成员变量和成员函数。")])]),t._v(" "),n("p",[t._v("继承的语法：")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 派生类名"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("［继承方式］ 基类名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    派生类新增加的成员\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("继承的"),n("code",[t._v("访问模式")])]),t._v(" "),n("p",[t._v("在这里仅记录关键点："),n("code",[t._v("protected")]),t._v("关键字在类外不可访问，但是在派生类的内部可以访问")]),t._v(" "),n("h4",{attrs:{id:"虚继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚继承"}},[t._v("#")]),t._v(" 虚继承")]),t._v(" "),n("blockquote",[n("p",[t._v("C++提供虚继承机制，防止类继承关系中成员访问的二义性")])]),t._v(" "),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/200629/1-2006291J3551E.png",alt:"菱形继承和虚继承"}})]),t._v(" "),n("p",[t._v("看到的一个例子非常好")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//间接基类A\nclass A{\nprotected:\n    int m_a;\n};\n//直接基类B\nclass B: // virtual public public A{\nprotected:\n    int m_b;\n};\n//直接基类C\nclass C: // virtual public public A{\nprotected:\n    int m_c;\n};\n//派生类D\nclass D: public B, public C{\npublic:\n    void seta(int a){ m_a = a; }  //命名冲突\n    void setb(int b){ m_b = b; }  //正确\n    void setc(int c){ m_c = c; }  //正确\n    void setd(int d){ m_d = d; }  //正确\nprivate:\n    int m_d;\n};\nint main(){\n    D d;\n    return 0;\n}\n")])])]),n("p",[t._v("虚继承经典方案往往用于解决"),n("code",[t._v("菱形继承")])]),t._v(" "),n("p",[t._v("虚继承的目的是让某个类做出声明，承诺愿意共享它的基类。其中，这个被共享的基类就称为虚基类（Virtual Base Class），本例中的 A 就是一个虚基类。在这种机制下，不论虚基类在继承体系中出现了多少次，在派生类中都只包含一份虚基类的成员。")]),t._v(" "),n("h4",{attrs:{id:"虚继承的构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚继承的构造函数"}},[t._v("#")]),t._v(" 虚继承的构造函数")]),t._v(" "),n("p",[t._v("虚继承的构造函数与普通继承的构造函数大同小异，差别往往体现在与"),n("code",[t._v("直接派生")]),t._v("与"),n("code",[t._v("间接派生")]),t._v("，但是首个初始化的仍然的最终的基类。")]),t._v(" "),n("p",[t._v("其次，C++的规则是：")]),t._v(" "),n("blockquote",[n("p",[t._v("如果在继承链上存在虚继承的基类，则最底层的子类要负责完成该虚基类部分成员的构造。")])]),t._v(" "),n("p",[t._v("参照：http://c.biancheng.net/view/2281.html")]),t._v(" "),n("h3",{attrs:{id:"虚函数与多态性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚函数与多态性"}},[t._v("#")]),t._v(" 虚函数与多态性")]),t._v(" "),n("p",[t._v("面向对象程序设计语言具有三个主要特性："),n("code",[t._v("继承")]),t._v("、"),n("code",[t._v("封装")]),t._v("、"),n("code",[t._v("多态")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("多态")]),t._v("可以分为编译时的多态(主要包含运算符的重载)和运行时的多态(虚函数、继承等)，")]),t._v(" "),n("blockquote",[n("p",[t._v("定义一个函数为虚函数，不代表函数为不被实现的函数。\n定义他为虚函数是为了允许用基类的指针来调用子类的这个函数。\n定义一个函数为纯虚函数，才代表函数没有被实现。")])]),t._v(" "),n("p",[t._v("为了使用基类的指针指向派生类，使基类的指针能够访问到成员函数，C++增加了"),n("code",[t._v("虚函数")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\nusing namespace std;\n\n//基类People\nclass People{\npublic:\n    People(char *name, int age);\n    virtual void display();  //声明为虚函数\nprotected:\n    char *m_name;\n    int m_age;\n};\nPeople::People(char *name, int age): m_name(name), m_age(age){}\nvoid People::display(){\n    cout<<m_name<<"今年"<<m_age<<"岁了，是个无业游民。"<<endl;\n}\n\n//派生类Teacher\nclass Teacher: public People{\npublic:\n    Teacher(char *name, int age, int salary);\n    virtual void display();  //声明为虚函数\nprivate:\n    int m_salary;\n};\nTeacher::Teacher(char *name, int age, int salary): People(name, age), m_salary(salary){}\nvoid Teacher::display(){\n    cout<<m_name<<"今年"<<m_age<<"岁了，是一名教师，每月有"<<m_salary<<"元的收入。"<<endl;\n}\n\nint main(){\n    People *p = new People("王志刚", 23);\n    p -> display();\n\n    p = new Teacher("赵宏佳", 45, 8200);\n    p -> display();\n\n    return 0;\n}\n')])])]),n("p",[t._v("在使用虚函数的时候需要分情况讨论的是")]),t._v(" "),n("ul",[n("li",[t._v("使用基类的指针初始化基类")]),t._v(" "),n("li",[t._v("直接用派生类的指针初始化派生类对象")])]),t._v(" "),n("p",[t._v("我想这个无需讨论，跟平常的new用法类似")]),t._v(" "),n("ul",[n("li",[t._v("使用基类指针引用一个派生类对象")])]),t._v(" "),n("p",[t._v("此时指针可以访问基类与派生类的"),n("code",[t._v("成员函数")])]),t._v(" "),n("ul",[n("li",[t._v("使用派生类指针引用一个基类对象")])]),t._v(" "),n("p",[t._v("经过实测会报错，不允许使用")]),t._v(" "),n("p",[t._v("另外需要注意：")]),t._v(" "),n("blockquote",[n("p",[t._v("通过基类的指针只能访问从基类继承过去的成员，不能访问派生类新增的成员。")])]),t._v(" "),n("p",[t._v("与此同时")]),t._v(" "),n("p",[n("strong",[t._v("构造函数不能为虚函数")])]),t._v(" "),n("p",[n("strong",[t._v("析构函数能为虚函数")]),t._v("("),n("strong",[t._v("虚析构函数可以正确释放动态派生类对象的资源")]),t._v(")")]),t._v(" "),n("h4",{attrs:{id:"纯虚函数与抽象类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#纯虚函数与抽象类"}},[t._v("#")]),t._v(" 纯虚函数与抽象类")]),t._v(" "),n("p",[t._v("在C++中，可以将函数定义为"),n("code",[t._v("纯虚函数")]),t._v("，语法为")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("virtual 返回值类型 函数名 (函数参数) = 0;\n")])])]),n("p",[t._v("纯虚函数没有函数体，只有函数声明，在函数声明的结尾加上"),n("code",[t._v("=0")]),t._v("，表明函数为纯虚函数。")]),t._v(" "),n("p",[t._v("包含纯虚函数的类称为抽象类。他无法实例化对象。")]),t._v(" "),n("p",[t._v("抽象类通常是作为基类，让派生类去实现纯虚函数。")]),t._v(" "),n("p",[t._v("派生类必须实现纯虚函数才能被实例化。")]),t._v(" "),n("h4",{attrs:{id:"动态联编和静态联编"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态联编和静态联编"}},[t._v("#")]),t._v(" 动态联编和静态联编")]),t._v(" "),n("p",[n("strong",[t._v("如果代码关联在编译时确定，称为静态联编。代码在运行时关联称为动态联编。")])]),t._v(" "),n("p",[t._v("C++动态联编往往通过虚函数来实现")]),t._v(" "),n("blockquote",[n("p",[t._v("定义纯虚函数是为了实现一个接口，起到一个规范的作用，规范继承这个类的程序员必须实现这个函数。")])]),t._v(" "),n("h3",{attrs:{id:"模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),n("p",[n("code",[t._v("模板")]),t._v("，顾名思义就是将一个demo往上嵌套，这样可以增加其程序的复用性。")]),t._v(" "),n("h4",{attrs:{id:"函数模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数模板"}},[t._v("#")]),t._v(" 函数模板")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("template <typename 类型参数1 , typename 类型参数2 , ...> \n返回值类型  函数名(形参列表){\n    //在函数体中可以使用类型参数\n}\n")])])]),n("p",[t._v("实例化")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Swap<int>(a,b)//显示实例化\nSwap(a,b)//隐式实例化\n")])])]),n("h4",{attrs:{id:"类模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类模板"}},[t._v("#")]),t._v(" 类模板")]),t._v(" "),n("p",[t._v("类模板实例")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("template<typename T1, typename T2>  //这里不能有分号\nclass Point{\npublic:\n    Point(T1 x, T2 y): m_x(x), m_y(y){ }\npublic:\n    T1 getX() const;  //获取x坐标\n    void setX(T1 x);  //设置x坐标\n    T2 getY() const;  //获取y坐标\n    void setY(T2 y);  //设置y坐标\nprivate:\n    T1 m_x;  //x坐标\n    T2 m_y;  //y坐标\n};\n")])])]),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//声明示例\nPoint<int, int> p1(10, 20);\nPoint<int, float> p2(10, 15.5);\nPoint<float, char*> p3(12.4, "东经180度");\n')])])]),n("p",[t._v("与函数模板不同的是，类模板在实例化时必须显式地指明数据类型，编译器不能根据给定的数据推演出数据类型。")]),t._v(" "),n("p",[t._v("除了对象变量，我们也可以使用对象"),n("a",{attrs:{href:"http://c.biancheng.net/c/80/",target:"_blank",rel:"noopener noreferrer"}},[t._v("指针"),n("OutboundLink")],1),t._v("的方式来实例化：")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('Point<float, float> *p1 = new Point<float, float>(10.6, 109.3);\nPoint<char*, char*> *p = new Point<char*, char*>("东经180度", "北纬210度");\n')])])]),n("p",[t._v("需要注意的是，赋值号两边都要指明具体的数据类型，且要保持一致。下面的写法是错误的：")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//赋值号两边的数据类型不一致\nPoint<float, float> *p = new Point<float, int>(10.6, 109);\n//赋值号右边没有指明数据类型\nPoint<float, float> *p = new Point(10.6, 109);\n")])])]),n("h4",{attrs:{id:"标准模板库stl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#标准模板库stl"}},[t._v("#")]),t._v(" 标准模板库STL")]),t._v(" "),n("p",[t._v("仅涉及序列容器"),n("code",[t._v("vector")])]),t._v(" "),n("p",[t._v("迭代器"),n("code",[t._v("iterator")]),t._v("与遍历")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//遍历 vector 容器。\n#include <iostream>\n//需要引入 vector 头文件\n#include <vector>\nusing namespace std;\nint main()\n{\n    vector<int> v{1,2,3,4,5,6,7,8,9,10}; //v被初始化成有10个元素\n    cout << "第一种遍历方法：" << endl;\n    //size返回元素个数\n    for (int i = 0; i < v.size(); ++i)\n        cout << v[i] <<" "; //像普通数组一样使用vector容器\n    //创建一个正向迭代器，当然，vector也支持其他 3 种定义迭代器的方式\n    \n       cout << endl << "第二种遍历方法：" << endl;\n       vector<int>::iterator i;\n    //用 != 比较两个迭代器\n    for (i = v.begin(); i != v.end(); ++i)\n        cout << *i << " ";\n    \n       cout << endl << "第三种遍历方法：" << endl;\n    for (i = v.begin(); i < v.end(); ++i) //用 < 比较两个迭代器\n        cout << *i << " ";\n   \n       cout << endl << "第四种遍历方法：" << endl;\n    i = v.begin();\n    while (i < v.end()) { //间隔一个输出\n        cout << *i << " ";\n        i += 2; // 随机访问迭代器支持 "+= 整数"  的操作\n    }\n}\n')])])]),n("h3",{attrs:{id:"输入输出流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#输入输出流"}},[t._v("#")]),t._v(" 输入输出流")]),t._v(" "),n("h4",{attrs:{id:"c-流对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-流对象"}},[t._v("#")]),t._v(" C++流对象")]),t._v(" "),n("p",[t._v("在C++里面，控制输入输出有一套"),n("code",[t._v("流对象")]),t._v("的逻辑，称"),n("code",[t._v("标准I/O")]),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/180831/1-1PS1153301321.jpg",alt:"img"}})]),t._v(" "),n("blockquote",[n("p",[t._v("其中，图中的箭头代表各个类之间的派生关系。比如，ios 是所有流类的基类，它派生出 istream 和 ostream。特别需要指出的是，为了避免多继承的二义性，从 ios 派生出 istream 和 ostream 时，均使用了 virtual 关键字（虚继承）。")])]),t._v(" "),n("ul",[n("li",[t._v("istream：常用于接收从键盘输入的数据；")]),t._v(" "),n("li",[t._v("ostream：常用于将数据输出到屏幕上；")]),t._v(" "),n("li",[t._v("ifstream：用于读取文件中的数据；")]),t._v(" "),n("li",[t._v("ofstream：用于向文件中写入数据；")]),t._v(" "),n("li",[t._v("iostream：继承自 istream 和 ostream 类，因为该类的功能兼两者于一身，既能用于输入，也能用于输出；")]),t._v(" "),n("li",[t._v("fstream：兼 ifstream 和 ofstream 类功能于一身，既能读取文件中的数据，又能向文件中写入数据。")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("打开方式")]),t._v(" "),n("th",[t._v("解释")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("ios::in")]),t._v(" "),n("td",[t._v("为读文件而打开文件")])]),t._v(" "),n("tr",[n("td",[t._v("ios::out")]),t._v(" "),n("td",[t._v("为写文件而打开文件")])]),t._v(" "),n("tr",[n("td",[t._v("ios::ate")]),t._v(" "),n("td",[t._v("初始位置：文件尾")])]),t._v(" "),n("tr",[n("td",[t._v("ios::app")]),t._v(" "),n("td",[t._v("追加方式写文件")])]),t._v(" "),n("tr",[n("td",[t._v("ios::trunc")]),t._v(" "),n("td",[t._v("如果文件存在先删除，再创建")])]),t._v(" "),n("tr",[n("td",[t._v("ios::binary")]),t._v(" "),n("td",[t._v("二进制方式")])])])]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 文件打开方式可以配合使用，利用|操作符")]),t._v(" "),n("h4",{attrs:{id:"写文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写文件"}},[t._v("#")]),t._v(" 写文件")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <fstream>\n\nvoid test01()\n{\n\tofstream ofs;\n\tofs.open("test.txt", ios::out);\n\n\tofs << "姓名：张三" << endl;\n\tofs << "性别：男" << endl;\n\tofs << "年龄：18" << endl;\n\n\tofs.close();\n}\n\nint main() {\n\ttest01();\n\tsystem("pause");\n\treturn 0;\n}\n')])])]),n("h4",{attrs:{id:"读文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读文件"}},[t._v("#")]),t._v(" 读文件")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <fstream>\n#include <string>\nvoid test01()\n{\n\tifstream ifs;\n\tifs.open("test.txt", ios::in);\n\tif (!ifs.is_open())\n\t{\n\t\tcout << "文件打开失败" << endl;\n\t\treturn;\n\t}\n\t//第一种方式\n\t//char buf[1024] = { 0 };\n\t//while (ifs >> buf)\n\t//{\n\t//\tcout << buf << endl;\n\t//}\n\t//第二种\n\t//char buf[1024] = { 0 };\n\t//while (ifs.getline(buf,sizeof(buf)))\n\t//{\n\t//\tcout << buf << endl;\n\t//}\n\t//第三种\n\t//string buf;\n\t//while (getline(ifs, buf))\n\t//{\n\t//\tcout << buf << endl;\n\t//}\n\tchar c;\n\twhile ((c = ifs.get()) != EOF)\n\t{\n\t\tcout << c;\n\t}\n\tifs.close();\n}\nint main() {\n\ttest01();\n\tsystem("pause");\n\treturn 0;\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);